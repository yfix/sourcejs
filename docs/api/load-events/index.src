<style type="text/css">
	ul {
		list-style: disc inside;
	}
</style>

<h1>Событие загрузки страницы</h1>

<div class="source_info">
    <p>Реализует оповещения о завершении обработки контента спецификации произвольным модулей или плагином</p>
</div>

<section class="source_section">
    <h2>Как это работает:</h2>

	<p>
		В теле спецификации может быть вызван произвольный плагин, некоторым образом обрабатывающий контент.
		Количество вызовов неограничено. В случае, если плагин будет надлежащим образом оформлен, система контроля позволит отслеживать завершение работы плагина на странице.
	</p>

	<p>
		Для регистрации плагина в системе нотификаций необходимо добавить его параметры в глобальный объект <i>window.source.loadEvents</i>.
		Рекомендуется добавление следующим образом:
	</p>

	<ol>
		<li>
			<p>
				<strong>Инициализация объекта</strong>
			</p>

<code class="source_visible src-js">
	window.source = window.source || {}
window.source.loadEvents = window.source.loadEvents || {}
</code>
		</li>
		<li>
			<p>
				<strong>Добавление настроек</strong>
			</p>

			<p>
				Любой плагин может иметь следующие настройки:

				<ul>
					<li>время своего исполнения (<i>timeout</i>)</li>
					<li>событием завершения выполнения (<i>finishEvent</i>)</li>
					<li>событие отсрочки завершения (<i>updateEvent</i>)</li>
				</ul>
			</p>

			<p>
				По умолчанию после запуска плагину дается фиксированное время для завершения работы (1000 мсек.).
				В случае, если по окончанию этого времени плагин никак не сигнализирует о своем завершении (или работе), он считается неконтролируемым, его отслеживание прекращается, генерируется событие о таймауте.
				При этом его работу система принудительно не завершает, обработка контента может продолжаться.
				<br />
				Событие таймаута выглядит как <i>pluginName</i>TimeOut, где <i>pluginName</i> — название плагина.
			</p>
			<p>
				Для того, чтобы контролировать процесс обработки контента более гибко, плагин может принять часть контроля над процессом своей работы на себя.
				Для этого используются механизмы переопределения таймаута контроля плагина и события отсрочки завершения.
			</p>
			<p>
				Заданное значение timeout в настройках плагина перекрывает значение по умолчанию.
				Изменение значения ведет к уменьшению/увеличению интервала контроля работы плагина.
			</p>
			<p>
				В случае, если в ходе работы плагина возникает потребность в дополнительном времени на обработку данных, хорошо использовать событие отсрочки завершения — <i>updateEvent</i>.
				При срабатывании этого события счетчик таймера выполнения сбрасывается и таймаут считается заново.
			</p>
			<p>
				В случае, если плагин считает, что его работа завершена, не обязательно следует дожидаться таймаута для завершения контроля — правильно воспользоваться событием завершения <i>finishEvent</i>.
			</p>
			<p>
				Пример настроек плагина выглядит так:
			</p>

<code class="source_visible src-js">
window.source.loadEvents.pluginName = window.source.loadEvents.pluginName || {
	timeout: '300',
	finishEvent: 'uniqPluginFinishEventName',
	updateEvent: 'uniqPluginUpdateEventName'
}
</code>
		</li>
		<li>
			<p>
				<strong>Генерация событий плагином</strong>
			</p>

			<p>Пример генерации события отсрочки:</p>

<code class="source_visible src-js">
	if (window.CustomEvent) {
	event = new CustomEvent('uniqPluginUpdateEventName');
} else {
	event = document.createEvent('CustomEvent');
	event.initCustomEvent('uniqPluginUpdateEventName', true, true);
}
</code>

			<p>Событие завершения генерируется аналогично.</p>
		</li>
		<li>
			<p>
				<strong>Статус плагина после генерации события</strong>
			</p>

			<p>
				Естественно, отлеживать работу плагина можно по генерируемым им событиям завершения или событию его таймаута.
				Однако может возникать ситуация, когда факт подписки совершается уже после генерации нужного события.
				В этом случае статус плагина можно контролировать по значению поля <i>window.source.loadEvents.pluginName.finish</i> — если плагин отработал, оно будет <i>true</i>, иначе <i>undefined</i>
			</p>

		</li>
		<li>
			<p>
				<strong>Событие готовности всех плагинов</strong>
			</p>

			<p>На факт отработки всех плагинов на странице генерируется событие <i>allPluginsFinish</i></p>
		</li>
		<li>
			<p>
				<strong>Объединение плагинов в группы и их контроль</strong>
			</p>

			<p>
				Можно создавать группы контроля, включающие в себя неограниченное количество плагинов на страницы.
				Плагины в группах могут пересекаться.
				Группа представляет собой массив с перечислением названий контролируемых плагинов.
				По факту отработки всех плагинов в группе генерируется событие <i>groupName</i>GroupFinish , где <i>groupName</i> — название группы контроля.

			</p>

			<p>Пример декларации группы:</p>

<code class="source_visible src-js">
	window.source = window.source || {};
window.source.loadEvents = window.source.loadEvents || {};
window.source.loadEvents.groupName1 = ['pluginName1', 'pluginName2'];
</code>
		</li>
	</ol>

</section>